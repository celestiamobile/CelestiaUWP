jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'windows-2022'

  variables:
    solution: '**/*.sln'
    buildConfiguration: 'Release'
    contentCommitHash: ${{ '9f85700c021c0ef084c209a6e32b176bf95524d6' }}
    buildType: ${{ parameters.buildType }}
    arch: ${{ parameters.arch }}
    dependencyVersion: '1.0.1'

  steps:
  - checkout: Celestia
    fetchDepth: 0
  - checkout: CelestiaContent
    fetchDepth: 0
  - checkout: CelestiaLocalization
    fetchDepth: 0
  - checkout: self
    fetchDepth: 0

  - pwsh: |
      $vs = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -products * -requires Microsoft.Component.MSBuild -latest -utf8 -format json | ConvertFrom-Json
      $msbuild = Join-Path $vs[0].installationPath "MSBuild" "Current" "Bin" "MSBuild.exe"
      Write-Host "##vso[task.setvariable variable=msbuild;]$msbuild"
    displayName: 'Find MSBuild'

  - script: |
      choco install sentry-cli
    displayName: 'Install Sentry CLI'

  - script: |
      cd Celestia
      git checkout origin/$(Build.SourceBranchName)
      cd ../CelestiaLocalization
      git checkout origin/$(Build.SourceBranchName)
    displayName: 'Checkout Branch'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git checkout origin/$(System.PullRequest.TargetBranch)
      cd ../CelestiaLocalization
      git checkout origin/$(System.PullRequest.TargetBranch)
    displayName: 'Checkout Branch (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd CelestiaContent
      git checkout $(contentCommitHash)
    displayName: 'Checkout Content'

  - script: |
      cd CelestiaUWP
      git apply patches/nuget/nuget.patch --ignore-whitespace --whitespace=nowarn
    displayName: 'Apply Nuget Patches'

  - script: |
      cd Celestia
      git apply ../CelestiaUWP/patches/angle/celestia.patch --ignore-whitespace --whitespace=nowarn
    displayName: 'Apply ANGLE Patches'

  - script: |
      call "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\run_gperf.bat" "$(System.DefaultWorkingDirectory)\CelestiaUWP"
    displayName: 'Running gperf'

  - bash: |
      cd CelestiaUWP

      TO_REPLACE="SENTRY-DSN"
      NEW_STRING=$(SENTRY-DSN)
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" CelestiaWinUI/App.xaml.cpp

      echo "New Content:"
      cat CelestiaWinUI/App.xaml.cpp
    displayName: 'Replace Sentry Placeholder'

  - script: |
      call "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\copy_general_data.bat" "$(System.DefaultWorkingDirectory)\CelestiaUWP" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaWinUI\Resources"
    displayName: 'Copy General Data'

  - script: |
      call "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\convert_po.bat" "$(System.DefaultWorkingDirectory)\CelestiaUWP" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaWinUI\Resources"
    displayName: 'Convert POs'

  - task: NuGetToolInstaller@1
    displayName: 'Install Nuget'

  - task: DownloadPackage@1
    inputs:
      packageType: 'nuget'
      feed: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      view:
      definition: '8eb6c372-ca5d-454e-9d4a-55ac65df8010'
      version: '$(dependencyVersion)'
      extract: false
      downloadPath: '$(System.DefaultWorkingDirectory)'
    displayName: 'Download Dependencies'

  - script: |
      ren celestia-windows-release-dependencies.nupkg celestia-windows-release-dependencies.$(dependencyVersion).nupkg
    displayName: 'Rename NUPKG'

  - task: NuGetCommand@2
    inputs:
      command: custom
      arguments: 'install celestia-windows-release-dependencies -source $(System.DefaultWorkingDirectory) -OutputDirectory CelestiaUWP/packages'
    displayName: 'Install Dependencies'

  - script: |
      DEL celestia-windows-release-dependencies.$(dependencyVersion).nupkg
      RD Celestia\.git /S /Q
      RD CelestiaContent\.git /S /Q
      RD CelestiaUWP\.git /S /Q
    displayName: 'Remove Unneeded Files'

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
    displayName: 'Restore Solution'

  - task: DownloadSecureFile@1
    name: signingCert
    displayName: 'Download CA certificate'
    inputs:
      secureFile: '3d.pfx'

  - pwsh: |
      $CurrentDir = Get-Location
      New-Item -Name "AppPackages" -ItemType "directory"
      & "$(msbuild)" /m /t:CelestiaWinUI /p:Configuration=Release /p:Platform="x64" /p:AppxBundlePlatforms="x64" /p:AppxPackageDir="${CurrentDir}\AppPackages\" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=CI /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="" /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)" /p:GenerateAppxPackageOnBuild=true "CelestiaUWP.sln"
    workingDirectory: '$(System.DefaultWorkingDirectory)\CelestiaUWP'
    displayName: 'Build MSIXUpload'
    condition: eq( variables['buildType'], 'msixupload' )

  - pwsh: |
      $CurrentDir = Get-Location
      New-Item -Name "AppPackages" -ItemType "directory"
      & "$(msbuild)" /m /t:CelestiaWinUI /p:Configuration=Release /p:Platform="x64" /p:AppxBundlePlatforms="x64" /p:AppxPackageDir="${CurrentDir}\AppPackages\" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideLoadOnly /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="" /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)" /p:GenerateAppxPackageOnBuild=true "CelestiaUWP.sln"
    workingDirectory: '$(System.DefaultWorkingDirectory)\CelestiaUWP'
    displayName: 'Build Sideload'
    condition: eq( variables['buildType'], 'sideload' )

  - pwsh: |
      $packageManifestContent = Get-Content -Path CelestiaWinUI\Package.appxmanifest -Raw
      $packageManifestXML = [xml]$packageManifestContent
      $version = $packageManifestXML.Package.Identity.Version

      New-Item -Name "Symbols" -ItemType "directory"
      Rename-Item -Path "AppPackages\CelestiaWinUI_${version}_Test\CelestiaWinUI_${version}_x64.msixsym" -NewName "symbols.zip"
      Expand-Archive "AppPackages\CelestiaWinUI_${version}_Test\symbols.zip" -Destination Symbols
      Rename-Item -Path "AppPackages\CelestiaWinUI_${version}_Test\symbols.zip" -NewName "CelestiaWinUI_${version}_x64.msixsym"
    displayName: 'Move Symbols'
    workingDirectory: '$(System.DefaultWorkingDirectory)\CelestiaUWP'

  - pwsh: |
      $packageManifestContent = Get-Content -Path CelestiaWinUI\Package.appxmanifest -Raw
      $packageManifestXML = [xml]$packageManifestContent
      $version = $packageManifestXML.Package.Identity.Version

      New-Item -Name "Output" -ItemType "directory"

      Compress-Archive -Path Symbols\* -Destination "Output\symbols.zip"
      Rename-Item -Path "Output\symbols.zip" -NewName "CelestiaWinUI_${version}_x64.appxsym"

      New-Item -Name "MSIX" -ItemType "directory"
      Copy-Item -Path "AppPackages\CelestiaWinUI_${version}_Test\CelestiaWinUI_${version}_x64.msix" -Destination "MSIX"
      packages\Microsoft.Windows.SDK.BuildTools.10.0.22621.3233\bin\10.0.22621.0\x64\makeappx.exe bundle /d MSIX /bv ${version} /o /p Output\CelestiaWinUI_${version}_x64.msixbundle
      packages\Microsoft.Windows.SDK.BuildTools.10.0.22621.3233\bin\10.0.22621.0\x64\signtool.exe sign /a /v /fd SHA256 /f "$(signingCert.secureFilePath)" Output\CelestiaWinUI_${version}_x64.msixbundle

      Compress-Archive -Path Output\* -Destination "output.zip"
      Rename-Item -Path "output.zip" -NewName "CelestiaWinUI_${version}_x64_bundle.msixupload"
      Remove-Item -Path "AppPackages" -Recurse -Force
      New-Item -Name "AppPackages" -ItemType "directory"
      Move-Item -Path "CelestiaWinUI_${version}_x64_bundle.msixupload" -Destination "AppPackages"
    workingDirectory: '$(System.DefaultWorkingDirectory)\CelestiaUWP'
    displayName: 'Bundle'
    condition: eq( variables['buildType'], 'msixupload' )

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)\CelestiaUWP\AppPackages'
      ArtifactName: '$(buildType)'
      publishLocation: Container

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Symbols'
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)\CelestiaUWP\Symbols'
      ArtifactName: '$(buildType)-symbols'
      publishLocation: Container

  - script: |
      sentry-cli debug-files upload -o celestia-vs -p windows --auth-token $(SENTRY_AUTH_TOKEN) --include-sources Symbols
    workingDirectory: '$(System.DefaultWorkingDirectory)\CelestiaUWP'
    displayName: 'Uplaod Symbols'