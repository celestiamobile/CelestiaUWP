jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'windows-latest'

  variables:
    solution: '**/*.sln'
    buildConfiguration: 'Release'
    buildType: ${{ parameters.buildType }}
    arch: ${{ parameters.arch }}

  steps:
  - checkout: vcpkg-prebuilt
    fetchDepth: 1
  - checkout: Celestia
  - checkout: self
    submodules: true

  - script: |
      cd Celestia
      git checkout origin/master
      git submodule update --init
    displayName: 'Checkout Branch'

  - script: |
      cd CelestiaUWP
      git config --global user.email "name@name.com"
      git config --global user.name "Name Name"
      git cherry-pick origin/nupkg-dependencies
    displayName: 'Cherry-Pick Pre-built Nuget Changes'

  - script: |
      cd Celestia
      git cherry-pick origin/angle
    displayName: 'Cherry-Pick ANGLE Commit'

  - script: |
      call "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\copy_general_data.bat" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\Resources"
    displayName: 'Copy General Data'

  - script: |
      call "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\convert_po.bat" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\Resources"
    displayName: 'Convert POs'

  - task: NuGetToolInstaller@1
    displayName: 'Install Nuget'

  - task: NuGetCommand@2
    inputs:
      command: custom
      arguments: 'install vcpkg-export-20210727-120109 -source $(System.DefaultWorkingDirectory)/vcpkg-prebuilt -OutputDirectory CelestiaUWP/packages'
    displayName: 'Install Pre-built Nuget Packages'

  - script: |
      RD vcpkg-prebuilt /S /Q
      RD CelestiaUWP\packages\vcpkg-export-20210727-120109.1.0.0\installed\x64-uwp\debug /S /Q
      RD CelestiaUWP\packages\vcpkg-export-20210727-120109.1.0.0\installed\arm64-uwp\debug /S /Q
      RD Celestia\.git /S /Q
      RD Celestia\thirdparty /S /Q
      RD Celestia\content /S /Q
      RD CelestiaUWP\.git /S /Q
    displayName: 'Remove Unneeded Files'

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
    displayName: 'Restore Solution'

  - task: DownloadSecureFile@1
    name: signingCert
    displayName: 'Download CA certificate'
    inputs:
      secureFile: '3d.pfx'

  - task: VSBuild@1
    inputs:
      platform: x64
      solution: '$(solution)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/p:AppxBundlePlatforms="x64|ARM64"
                    /p:AppxPackageDir="$(build.artifactStagingDirectory)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=CI
                    /p:AppxPackageSigningEnabled=true
                    /p:PackageCertificateThumbprint=""
                    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"'
    displayName: 'Build MSIXUpload'
    condition: eq( variables['buildType'], 'msixupload' )

  - task: VSBuild@1
    inputs:
      platform: x64
      solution: '$(solution)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/p:AppxBundlePlatforms="x64"
                    /p:AppxPackageDir="$(build.artifactStagingDirectory)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=SideLoadOnly
                    /p:AppxPackageSigningEnabled=true
                    /p:PackageCertificateThumbprint=""
                    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"'
    displayName: 'Build Sideload'
    condition: eq( variables['buildType'], 'sideload' )

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(buildType)'
      publishLocation: Container
