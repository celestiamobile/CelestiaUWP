jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'windows-2022'

  variables:
    solution: '**/*.sln'
    buildConfiguration: 'Release'
    buildType: ${{ parameters.buildType }}
    arch: ${{ parameters.arch }}

  steps:
  - checkout: Celestia
    fetchDepth: 0
  - checkout: CelestiaContent
    fetchDepth: 1
  - checkout: CelestiaLocalization
    fetchDepth: 0
  - checkout: self
    fetchDepth: 0

  - script: |
      cd Celestia
      git checkout origin/$(Build.SourceBranchName)
      git submodule update --init thirdparty/miniaudio
      cd ../CelestiaLocalization
      git checkout origin/$(Build.SourceBranchName)
    displayName: 'Checkout Branch'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git checkout origin/$(System.PullRequest.TargetBranch)
      git submodule update --init thirdparty/miniaudio
      cd ../CelestiaLocalization
      git checkout origin/$(System.PullRequest.TargetBranch)
    displayName: 'Checkout Branch (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd CelestiaUWP
      git config --global user.email "name@name.com"
      git config --global user.name "Name Name"
      git cherry-pick origin/nuget-dependencies-$(Build.SourceBranchName)
    displayName: 'Cherry-Pick Pre-built Nuget Changes'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd CelestiaUWP
      git config --global user.email "name@name.com"
      git config --global user.name "Name Name"
      git cherry-pick origin/nuget-dependencies-$(System.PullRequest.TargetBranch)
    displayName: 'Cherry-Pick Pre-built Nuget Changes (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git cherry-pick origin/angle-$(Build.SourceBranchName)
    displayName: 'Cherry-Pick Commits'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git cherry-pick origin/angle-$(System.PullRequest.TargetBranch)
    displayName: 'Cherry-Pick Commits (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - pwsh: |
      (Get-Content CelestiaUWP\App.xaml.cs) -replace 'APPCENTER-APP-ID', '06fcb18f-a477-4b2d-9cd9-f1b37135c16b' | Out-File -encoding UTF8 CelestiaUWP\App.xaml.cs
      Write-Host "New Content:"
      Get-Content CelestiaUWP\App.xaml.cs
    workingDirectory: '$(System.DefaultWorkingDirectory)\CelestiaUWP'
    displayName: 'Replace AppCenter Placeholder'

  - script: |
      call "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\copy_general_data.bat" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\Resources"
    displayName: 'Copy General Data'

  - script: |
      call "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\convert_po.bat" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\" "$(System.DefaultWorkingDirectory)\CelestiaUWP\CelestiaUWP\Resources"
    displayName: 'Convert POs'

  - task: NuGetToolInstaller@1
    displayName: 'Install Nuget'

  - task: DownloadPackage@1
    inputs:
      packageType: 'nuget'
      feed: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      view:
      definition: '4cdb44db-04e9-4260-9d08-43e13c6e4c99'
      version: '1.0.2'
      extract: false
      downloadPath: '$(System.DefaultWorkingDirectory)'
    displayName: 'Download Dependencies'

  - script: |
      ren celestia-uwp-dependencies.nupkg celestia-uwp-dependencies.1.0.1.nupkg
    displayName: 'Rename NUPKG'

  - task: NuGetCommand@2
    inputs:
      command: custom
      arguments: 'install celestia-uwp-dependencies -source $(System.DefaultWorkingDirectory) -OutputDirectory CelestiaUWP/packages'
    displayName: 'Install Dependencies'

  - script: |
      DEL celestia-uwp-dependencies.1.0.1.nupkg
      RD CelestiaUWP\packages\celestia-uwp-dependencies.1.0.1\installed\x64-uwp\debug /S /Q
      RD Celestia\.git /S /Q
      RD CelestiaContent\.git /S /Q
      RD CelestiaUWP\.git /S /Q
    displayName: 'Remove Unneeded Files'

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
    displayName: 'Restore Solution'

  - task: DownloadSecureFile@1
    name: signingCert
    displayName: 'Download CA certificate'
    inputs:
      secureFile: '3d.pfx'

  - task: VSBuild@1
    inputs:
      platform: x64
      solution: '$(solution)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/p:AppxBundlePlatforms="x64"
                    /p:AppxPackageDir="$(build.artifactStagingDirectory)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=CI
                    /p:AppxPackageSigningEnabled=true
                    /p:PackageCertificateThumbprint=""
                    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"'
    displayName: 'Build MSIXUpload'
    condition: eq( variables['buildType'], 'msixupload' )

  - task: VSBuild@1
    inputs:
      platform: x64
      solution: '$(solution)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/p:AppxBundlePlatforms="x64"
                    /p:AppxPackageDir="$(build.artifactStagingDirectory)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=SideLoadOnly
                    /p:AppxPackageSigningEnabled=true
                    /p:PackageCertificateThumbprint=""
                    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"'
    displayName: 'Build Sideload'
    condition: eq( variables['buildType'], 'sideload' )

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(buildType)'
      publishLocation: Container
