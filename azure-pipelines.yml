resources:
 repositories:
  - repository: Celestia
    type: github
    ref: angle
    endpoint: GithubAuth
    name: levinli303/Celestia
  - repository: vcpkg
    type: github
    endpoint: GithubAuth
    name: levinli303/vcpkg

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64|ARM64'
  buildConfiguration: 'Release'

steps:
- checkout: vcpkg
- checkout: Celestia
  submodules: true
- checkout: self
  submodules: true

- script: |
    .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
  displayName: 'Install VCPKG'

- script: |
    .\vcpkg\vcpkg.exe --triplet=x64-uwp install --recurse libpng libjpeg-turbo gettext lua fmt eigen3 freetype cspice angle
  displayName: 'Install x64 Dependencies'

- script: |
    .\vcpkg\vcpkg.exe --triplet=arm64-uwp install --recurse libpng libjpeg-turbo gettext lua fmt eigen3 freetype cspice angle
  displayName: 'Install ARM64 Dependencies'

- script: |
    .\vcpkg\vcpkg integrate install
  displayName: 'Integrate VCPKG'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    platform: 'x86'
    solution: '$(solution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\Celestia.msix /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:AppxPackageSigningEnabled=false'

- task: DownloadSecureFile@1
  inputs:
    secureFile: '3d.pfx'
  displayName: 'Download Secure PFX File'

- script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool"
    sign /fd SHA256 /f $(Agent.TempDirectory)/3d.pfx /p secret $(
    Build.ArtifactStagingDirectory)/MsixDesktopApp.msix'
  displayName: 'Sign MSIX Package'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'